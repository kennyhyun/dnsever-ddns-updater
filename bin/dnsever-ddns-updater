#!/usr/bin/env node

'use strict';

var when = require( 'when' );
var fs = require('fs');
var _ = require('underscore');

var core = require('../core');

var syncExec = require('sync-exec');
var path = require('path');
var Table = require('cli-table2');
var pkg = require('../package.json');
var program = require('commander');
var colors = require('colors');
colors.enabled = true;

//constants, enum
var ERROR_EXIT = 1;
//var SUCCESS_EXIT = 0;

var ROOT_PATH = core.getRootPath();
var ENV_PATH = core.getEnvPath();
var PROCESS_FILE_PATH = path.resolve( ROOT_PATH, 'process.json' );

var IP_REGEXP = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;


program
.version(pkg.version)
.usage('[command]');

program.on('--help', function() {
  console.log('  Basic Examples:');
  console.log('');
  console.log('    Set a your dnsEver.com id and secret code');
  console.log('    $ dnsever-ddns-updater id wonbin32');
  console.log('    $ dnsever-ddns-updater auth_code oiwj32olkd');
  console.log('');
  console.log('    pm2 path can be set optionally ( if not set, find global pm2 )');
  console.log('    $ dnsever-ddns-updater pm2_path /Users/b6pz/.nvm/versions/node/v4.2.6/bin/pm2');
  console.log('');
  console.log('    Show all informatino');
  console.log('    $ dnsever-ddns-updater show');
  console.log('');
  console.log('    Start the updater process.');
  console.log('    $ dnsever-ddns-updater start');
  console.log('');
  console.log('    Updater try to set all your host ddns to public ip.');
  console.log('');
  console.log('    If you have some exception hosts, add it to exception map');
  console.log('    $ dnsever-ddns-updater exception fakebook.com 123.123.123.123');
  console.log('');
  console.log('    If you want make some ip ignored,');
  console.log('    $ dnsever-ddns-updater exception dev.fakebook.com IGNORE');
  console.log('');
  console.log('    If you want delete some ip from the exception list,');
  console.log('    $ dnsever-ddns-updater exception:delete dev.fakebook.com');
  console.log('');
  console.log('    More information in https://github.com/b6pzeusbc54tvhw5jgpyw8pwz2x6gs/dnsever-ddns-updater');
  console.log('');
});

program.command('show')
.description('display all configure value')
.action(function() {
	config().then(code => process.exitCode = code || 0);
});

program.command('clean')
.description('Reset all settings')
.action(function() {
	core.clean();
});

program.command('exception:delete <host>')
.description('delete host from the exception list')
.action(function( host ) {

	if( ! host ) {

		console.log('host are required');
		return;
	}

	core.removeException( host );
	console.log('');
	console.log('Delete complete'.green);
	printExceptionMap( core.getEnv('exceptionMap'));
});

program.command('exception <host> <ip|ignore>')
.alias('exception:add')
.description('register host:ip to the exception list')
.action(function( host, ip ) {

	if( ! host ) {

		console.log('host and ip are required');
		return;
	}
	
	ip = ip.toUpperCase();
	if( ip !== 'IGNORE' && ! IP_REGEXP.test( ip )) {

		console.log('Wrong ip address'.red);
		return;
	}

	core.addException( host, ip );
	printExceptionMap( core.getEnv('exceptionMap'));
});

program.command('id <id>')
.description('set your DNSEver.com user id')
.action(function( id ) {
	core.setEnv( 'id', id );
	printCurrentConfig();
});
program.command('auth_code <auth_code>')
.description('set your DNSEver.com auth_code')
.action(function( secretCode ) {
	core.setEnv( 'auth_code', secretCode );
	printCurrentConfig();
});

program.command('pm2_path <pm2_path>')
.description('set your pm2 absolute path')
.action(function( pm2Path ) {
	core.setEnv( 'pm2Path', pm2Path );
	printCurrentConfig();
});

//
// pm2 process.json
//
var PM2 = (function() {

	let pm2Path = core.getEnv('pm2Path');
	if( ! pm2Path ) {
		var res = syncExec('which pm2');
		pm2Path = ( res.stdout || '' ).replace( /\n$/,'' );
	}

	return pm2Path;
}());

if( !PM2 ) {
	printPm2NotFoundInfo();
	process.exit( ERROR_EXIT );
}

var pm2script = {
	"name": "DNSEver.com DDNS Updater",
	"script": path.join( __dirname, '../starter.js'),
	"cwd": ROOT_PATH,
	"watch": [ ENV_PATH ],
	"args": [ "--color" ]
};

program.command('start')
.description('Start the DNSEver DDNS Updater process')
.action(function() {

	fs.writeFileSync( PROCESS_FILE_PATH, jsonStringify( pm2script ));
	exec([ PM2, 'start', PROCESS_FILE_PATH ]);
});

program.command('stop')
.description('Stop the DNSEver DDNS Updater process')
.action(function() {

	fs.writeFileSync( PROCESS_FILE_PATH, jsonStringify( pm2script ));
	exec([PM2,'delete', '"'+pm2script.name+'"' ]);
});

program.command('log')
.description('display logs of the DNSEver DDNS Updater process')
.action(function() {

	exec([ PM2, 'logs', '"'+pm2script.name+'"', '--raw']);
});


program.parse(process.argv);

function jsonStringify( json ) {
	return JSON.stringify( json || {} , null, 2 );
}

function config() {

	return when.all([ core.getPublicIp(), core.getCurrentDDNSSetting() ])
	.then( function( result ) {


		var public_ip = result[0];
		var currentDDNSSettings = result[1];

		console.log('');
		console.log( ' Your config file path: ' + ENV_PATH );
		printCurrentConfig( public_ip );
		printCurrentDDNSSetting( currentDDNSSettings );
		printExceptionMap( core.getEnv('exceptionMap'));
 		return currentDDNSSettings ? currentDDNSSettings.errorCode || 0 : -1;
	});
}

function printPm2NotFoundInfo() {
	console.log('');
	console.log('pm2 Not Found, install pm2 by typing a following command'.red);
	console.log('$ sudo npm install -g pm2'.white);
}

function printCurrentConfig( public_ip ) {

	var id = core.getEnv('id');
	var auth_code = core.getEnv('auth_code');
	var pm2Path = core.getEnv('pm2Path');

	if( ! id ) id = '[아이디를 설정하세요]'.red;
	else id = id.green;

	if( ! auth_code ) auth_code = '[다이나믹DNS 인증코드를]'.red;
	else auth_code = auth_code.green;

	var table = new Table({
		chars: {
			'top-left': '', top: '', 'top-right': '', 'top-mid': '',
			right: '', left: ' ', mid: '', 'left-mid': '', 'right-mid': '', 'mid-mid': '',
			'bottom-left': '', bottom: '', 'bottom-right': '', 'bottom-mid': ''
		},
		colWidths: [ 28, 34 ]
	});
	table.push(
		[{ hAlign: 'right', content:'DNSEver.com id'}, id ],
		[{ hAlign: 'right', content:'Dynamic DNS auth_code'}, auth_code ]
	);

	if( public_ip ) {
		if( IP_REGEXP.test( public_ip )) public_ip = public_ip.green;
		else public_ip = 'NOT_FOUND_PUBLIC_UP'.red;
		table.push(
			[{ hAlign: 'right', content:'current public_ip'}, public_ip ]
		);
	}

	if( pm2Path ) {
		table.push(
			[{ hAlign: 'right', content:'pm2 path'}, pm2Path.green ]
		);
	}

	console.log('────────────────────────────────────────────────────────────────'.gray);
	console.log( ' Config settings');
	console.log('');
	console.log( table.toString() );
}

function printCurrentDDNSSetting( map ) {

	console.log('');
	console.log('────────────────────────────────────────────────────────────────'.gray);
	console.log(' 현재 DDNS 설정상태');

	if( _.isEmpty( map )) {
		console.log( '{ }' );
	} else if( map.errorCode ) {
		console.log( jsonStringify(map, { type:'space',size:2 }).red );
	} else {
		console.log( JSON.stringify( map, null, 2 ) );
	}

	//var table = new Table({ chars: { right: '' }, colWidths: [ 69 ] });
	//table.push( [ map ]);
	//console.log( table.toString() );
}

function printExceptionMap( exceptionMap ) {

	console.log('');
	console.log('────────────────────────────────────────────────────────────────'.gray);
	console.log(' 업데이트 예외 설정 - public_ip 로 셋팅되지 않는 host');
	if( _.isEmpty( exceptionMap )) {
		console.log( '{ }' );
	} else {
		console.log( jsonStringify(exceptionMap, { type:'space',size:2 }) );
	}
}

if (process.argv.length == 2) {

	config().then( function(code) {
		console.log( '' );
		console.log('  -h, --help     output usage information'.yellow );
		console.log( '' );
		process.exitCode = code || 0;
	});
}

function exec( cmd ) {

	// var stdioOption = [0,1,2];
	var execOptions = { stdio: [ process.stdin, process.stdout, process.stderr ] };
	cmd = _.isArray( cmd ) ? cmd.join(' ') : cmd;

	syncExec( cmd, execOptions );
}
